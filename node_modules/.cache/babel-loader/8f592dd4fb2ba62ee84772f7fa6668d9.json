{"ast":null,"code":"var _jsxFileName = \"/Users/MartinMartinez/Desktop/Martins homework/EmployeeDirectory/src/components/Container.js\";\nimport API from \"../utils/API\";\nimport React, { Component } from \"react\";\nimport SearchBox from \"./SearchBox\"; // import SearchBox from \"./SearchBox\"\n\nimport TableData from \"./TableData\";\nimport \"./style.css\";\n\nclass Container extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      search: \"\",\n      employees: [],\n      filteredEmployees: [],\n      order: \"\"\n    };\n\n    this.sortByName = () => {\n      const filtereds = this.state.filteredEmployees;\n\n      if (this.state.order === \"asc\") {\n        const sorteds = filtereds.sort((a, b) => a.name.first > b.name.first ? 1 : -1);\n        console.log(sorteds);\n        this.setState({\n          filteredEmployees: sorteds,\n          order: \"desc\"\n        });\n      } else {\n        const sorteds = filtereds.sort((a, b) => a.name.first > b.name.first ? -1 : 1);\n        console.log(sorteds);\n        this.setState({\n          filteredEmployees: sorteds,\n          order: \"asc\"\n        });\n      }\n    };\n\n    this.handleInputChange = event => {\n      const employees = this.state.employees;\n      const UserInput = event.target.value;\n      const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1);\n      this.setState({\n        //change the state of  filteredEmployes now it holds all the employes that matches users\n        // search and will be passed down in this state\n        filteredEmployees\n      });\n    };\n\n    this.employeeSearch = () => {\n      API.getUsers().then(res => this.setState({\n        //change their both states to hold all the data from the API call(all employess) and will be passed down trough props like that\n        //employee will remain the same and filteredEmployes will be changed and passed down during application's life. Employee will always hold all employess.\n        filteredEmployees: res.data.results,\n        employees: res.data.results\n      })).catch(err => console.log(err));\n    };\n\n    this.handleSearch = event => {\n      event.preventDefault();\n\n      if (!this.state.search) {\n        alert(\"Enter a name\");\n      }\n\n      const {\n        employees,\n        search\n      } = this.state; //filters the object looking for the value that matches the value entered in the input box by the user  (search.this.state)\n\n      const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\n      this.setState({\n        filteredEmployees\n      });\n    };\n  }\n\n  // this is the initialization, what do you want the page to display when page it's first loaded\n  componentDidMount() {\n    API.getUsers().then(res => this.setState({\n      employees: res.data.results,\n      filteredEmployees: res.data.results\n    })).catch(err => console.log(err));\n  } //if \"name\" it's clicked employee are shown by asc/desc order\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(SearchBox, {\n      employee: this.state.employees,\n      handleSearch: this.handleSearch,\n      handleInputChange: this.handleInputChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(TableData, {\n      results: this.state.filteredEmployees,\n      sortByName: this.sortByName,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }\n    }));\n  }\n\n}\n\nexport default Container;","map":{"version":3,"sources":["/Users/MartinMartinez/Desktop/Martins homework/EmployeeDirectory/src/components/Container.js"],"names":["API","React","Component","SearchBox","TableData","Container","state","search","employees","filteredEmployees","order","sortByName","filtereds","sorteds","sort","a","b","name","first","console","log","setState","handleInputChange","event","UserInput","target","value","filter","employee","toLowerCase","indexOf","employeeSearch","getUsers","then","res","data","results","catch","err","handleSearch","preventDefault","alert","includes","componentDidMount","render"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,aAAtB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,aAAP;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAAA;AAAA;AAAA,SAM9BI,KAN8B,GAMtB;AACJC,MAAAA,MAAM,EAAE,EADJ;AAEJC,MAAAA,SAAS,EAAE,EAFP;AAGJC,MAAAA,iBAAiB,EAAE,EAHf;AAIJC,MAAAA,KAAK,EAAE;AAJH,KANsB;;AAAA,SAwB9BC,UAxB8B,GAwBjB,MAAM;AACf,YAAMC,SAAS,GAAG,KAAKN,KAAL,CAAWG,iBAA7B;;AACA,UAAI,KAAKH,KAAL,CAAWI,KAAX,KAAqB,KAAzB,EAAgC;AAC5B,cAAMG,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,KAAP,GAAeF,CAAC,CAACC,IAAF,CAAOC,KAAvB,GAAgC,CAAhC,GAAoC,CAAC,CAA9D,CAAhB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAEA,aAAKQ,QAAL,CAAc;AACVZ,UAAAA,iBAAiB,EAAEI,OADT;AAEVH,UAAAA,KAAK,EAAE;AAFG,SAAd;AAIH,OARD,MAQO;AAEH,cAAMG,OAAO,GAAGD,SAAS,CAACE,IAAV,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAWD,CAAC,CAACE,IAAF,CAAOC,KAAP,GAAeF,CAAC,CAACC,IAAF,CAAOC,KAAvB,GAAgC,CAAC,CAAjC,GAAqC,CAA9D,CAAhB;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYP,OAAZ;AAEA,aAAKQ,QAAL,CAAc;AACVZ,UAAAA,iBAAiB,EAAEI,OADT;AAEVH,UAAAA,KAAK,EAAE;AAFG,SAAd;AAKH;AACJ,KA7C6B;;AAAA,SA+C9BY,iBA/C8B,GA+CVC,KAAK,IAAI;AAEzB,YAAMf,SAAS,GAAG,KAAKF,KAAL,CAAWE,SAA7B;AACA,YAAMgB,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA/B;AACA,YAAMjB,iBAAiB,GAAGD,SAAS,CAACmB,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACX,IAAT,CAAcC,KAAd,CAAoBW,WAApB,GAAkCC,OAAlC,CAA0CN,SAAS,CAACK,WAAV,EAA1C,IAAqE,CAAC,CAAnG,CAA1B;AAEA,WAAKR,QAAL,CAAc;AACV;AACA;AAEAZ,QAAAA;AAJU,OAAd;AASH,KA9D6B;;AAAA,SAkE9BsB,cAlE8B,GAkEb,MAAM;AACnB/B,MAAAA,GAAG,CAACgC,QAAJ,GACKC,IADL,CACUC,GAAG,IAAI,KAAKb,QAAL,CAAc;AAEvB;AACA;AACAZ,QAAAA,iBAAiB,EAAEyB,GAAG,CAACC,IAAJ,CAASC,OAJL;AAKvB5B,QAAAA,SAAS,EAAE0B,GAAG,CAACC,IAAJ,CAASC;AALG,OAAd,CADjB,EAQKC,KARL,CAQWC,GAAG,IAAInB,OAAO,CAACC,GAAR,CAAYkB,GAAZ,CARlB;AASH,KA5E6B;;AAAA,SA+E9BC,YA/E8B,GA+EfhB,KAAK,IAAI;AACpBA,MAAAA,KAAK,CAACiB,cAAN;;AACA,UAAI,CAAC,KAAKlC,KAAL,CAAWC,MAAhB,EAAwB;AACpBkC,QAAAA,KAAK,CAAC,cAAD,CAAL;AACH;;AACD,YAAM;AAAEjC,QAAAA,SAAF;AAAaD,QAAAA;AAAb,UAAwB,KAAKD,KAAnC,CALoB,CAOpB;;AACA,YAAMG,iBAAiB,GAAGD,SAAS,CAACmB,MAAV,CAAiBC,QAAQ,IAAIA,QAAQ,CAACX,IAAT,CAAcC,KAAd,CAAoBW,WAApB,GAAkCa,QAAlC,CAA2CnC,MAAM,CAACsB,WAAP,EAA3C,CAA7B,CAA1B;AAEA,WAAKR,QAAL,CAAc;AACVZ,QAAAA;AADU,OAAd;AAGH,KA5F6B;AAAA;;AAc9B;AACAkC,EAAAA,iBAAiB,GAAG;AAChB3C,IAAAA,GAAG,CAACgC,QAAJ,GAAeC,IAAf,CAAoBC,GAAG,IAAI,KAAKb,QAAL,CAAc;AACrCb,MAAAA,SAAS,EAAE0B,GAAG,CAACC,IAAJ,CAASC,OADiB;AAErC3B,MAAAA,iBAAiB,EAAEyB,GAAG,CAACC,IAAJ,CAASC;AAFS,KAAd,CAA3B,EAGIC,KAHJ,CAGUC,GAAG,IAAInB,OAAO,CAACC,GAAR,CAAYkB,GAAZ,CAHjB;AAIH,GApB6B,CAsB9B;;;AA0EAM,EAAAA,MAAM,GAAG;AAEL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAEI,oBAAC,SAAD;AACI,MAAA,QAAQ,EAAE,KAAKtC,KAAL,CAAWE,SADzB;AAEI,MAAA,YAAY,EAAE,KAAK+B,YAFvB;AAGI,MAAA,iBAAiB,EAAE,KAAKjB,iBAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,eAMI,oBAAC,SAAD;AAAW,MAAA,OAAO,EAAE,KAAKhB,KAAL,CAAWG,iBAA/B;AACI,MAAA,UAAU,EAAE,KAAKE,UADrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANJ,CADJ;AAeH;;AAjH6B;;AAoHlC,eAAeN,SAAf","sourcesContent":["import API from \"../utils/API\";\nimport React, { Component } from \"react\"\nimport SearchBox from \"./SearchBox\"\n// import SearchBox from \"./SearchBox\"\nimport TableData from \"./TableData\"\nimport \"./style.css\";\n\nclass Container extends Component {\n\n    // Setting the component's initial state\n    //search starts as an empty string\n    //employess and filteredEmployess are empty arrays because that it's the structure of the data we'll be working with\n    //order it's to reference the order that the employees are. By defaltu they come randonly and the first click will trigger then to be in asc order\n    state = {\n        search: \"\",\n        employees: [],\n        filteredEmployees: [],\n        order: \"\"\n\n    };\n\n    // this is the initialization, what do you want the page to display when page it's first loaded\n    componentDidMount() {\n        API.getUsers().then(res => this.setState({\n            employees: res.data.results,\n            filteredEmployees: res.data.results\n        })).catch(err => console.log(err))\n    }\n\n    //if \"name\" it's clicked employee are shown by asc/desc order\n\n    sortByName = () => {\n        const filtereds = this.state.filteredEmployees;\n        if (this.state.order === \"asc\") {\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? 1 : -1)\n            console.log(sorteds)\n\n            this.setState({\n                filteredEmployees: sorteds,\n                order: \"desc\"\n            })\n        } else {\n\n            const sorteds = filtereds.sort((a, b) => (a.name.first > b.name.first) ? -1 : 1)\n            console.log(sorteds)\n\n            this.setState({\n                filteredEmployees: sorteds,\n                order: \"asc\"\n            })\n\n        }\n    }\n    //when input is changing it will dynamically show the associates names that match in the screen\n    handleInputChange = event => {\n\n        const employees = this.state.employees;\n        const UserInput = event.target.value;\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().indexOf(UserInput.toLowerCase()) > -1\n        )\n        this.setState({\n            //change the state of  filteredEmployes now it holds all the employes that matches users\n            // search and will be passed down in this state\n\n            filteredEmployees,\n\n        });\n\n\n    };\n\n\n    //API call triggered when page it's refreshed and  when application it's loaded \n    employeeSearch = () => {\n        API.getUsers()\n            .then(res => this.setState({\n\n                //change their both states to hold all the data from the API call(all employess) and will be passed down trough props like that\n                //employee will remain the same and filteredEmployes will be changed and passed down during application's life. Employee will always hold all employess.\n                filteredEmployees: res.data.results,\n                employees: res.data.results\n            }))\n            .catch(err => console.log(err))\n    }\n\n    //when button search it's clicked\n    handleSearch = event => {\n        event.preventDefault();\n        if (!this.state.search) {\n            alert(\"Enter a name\")\n        }\n        const { employees, search } = this.state;\n\n        //filters the object looking for the value that matches the value entered in the input box by the user  (search.this.state)\n        const filteredEmployees = employees.filter(employee => employee.name.first.toLowerCase().includes(search.toLowerCase()));\n\n        this.setState({\n            filteredEmployees\n        });\n    }\n\n\n\n    render() {\n\n        return (\n            <div>\n\n                <SearchBox\n                    employee={this.state.employees}\n                    handleSearch={this.handleSearch}\n                    handleInputChange={this.handleInputChange} />\n                <TableData results={this.state.filteredEmployees}\n                    sortByName={this.sortByName}\n\n                />\n            </div >\n\n\n        )\n    }\n}\n\nexport default Container"]},"metadata":{},"sourceType":"module"}